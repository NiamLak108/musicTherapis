import os
from flask import Flask, request, jsonify
from dotenv import load_dotenv
from llmproxy import generate
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials, SpotifyOAuth

app = Flask(__name__)

# === 🔑 Load API Keys & Environment Variables ===
load_dotenv()

SPOTIFY_CLIENT_ID = os.getenv("SPOTIFY_CLIENT_ID")
SPOTIFY_CLIENT_SECRET = os.getenv("SPOTIFY_CLIENT_SECRET")
SPOTIFY_REDIRECT_URI = os.getenv("SPOTIFY_REDIRECT_URI", "http://localhost:8888/callback")

# === 🎵 Spotify Authentication ===
sp = spotipy.Spotify(auth_manager=SpotifyOAuth(
    client_id=SPOTIFY_CLIENT_ID,
    client_secret=SPOTIFY_CLIENT_SECRET,
    redirect_uri=SPOTIFY_REDIRECT_URI,
    scope="playlist-modify-public"
))

# === 💬 Chatbot Session Data ===
session = {
    "state": "conversation",
    "preferences": {"mood": None, "genre": None}
}

def generate_playlist(mood, genre):
    """Uses LLM to generate a playlist of 10 songs based on mood & genre."""
    response = generate(
        model="4o-mini",
        system="""
            You are a **music therapy assistant** named MELODY 🎶. Your job is to create **personalized playlists** for users.
            
            - If it's the **first message**, say:
              "🎵 **WELCOME TO MELODY!** 🎶\nTell me how you're feeling and your favorite genre, and I'll create a **custom playlist just for you!**\n\nFor example:\n- "I'm feeling happy and I love pop!"\n- "I need some chill lo-fi beats."
            
            - Ask the user for their **mood and favorite music genre** if they haven't provided both yet.
            - Be **casual, friendly, and full of emojis** 🎧✨.
            - DO NOT repeat details that have already been collected.
            - Once both **mood** and **genre** are provided, confirm them and say:
              "Got it! I'll create a playlist based on your mood: [mood] and your genre: [genre]. 🎶\nGenerating your playlist now..."
              
            - Then, generate a **10-song playlist** based on the user's mood & genre.
            - Format the response as:
              "**🎵 Playlist: [Creative Playlist Name]**\n
              1. [Song 1] - [Artist]\n
              2. [Song 2] - [Artist]\n
              ...
              10. [Song 10] - [Artist]"
        """,
        query=f"User input: '{mood}, {genre}'",
        temperature=0.7,
        lastk=10,
        session_id="music-therapy-session",
        rag_usage=False
    )

    playlist_text = response.get("response", "").strip()
    
    if not playlist_text:
        return None, "⚠️ Sorry, I couldn't generate a playlist. Try again!"
    
    return playlist_text, extract_songs(playlist_text)


def extract_songs(playlist_text):
    """Extracts song titles and artists from the LLM-generated playlist."""
    songs = []
    lines = playlist_text.split("\n")
    for line in lines:
        if line.strip() and line[0].isdigit():  # Looks for lines that start with a number
            parts = line.split(" - ")
            if len(parts) == 2:
                song_title = parts[0].split(". ")[1].strip()
                artist = parts[1].strip()
                songs.append((song_title, artist))
    return songs


def search_songs(songs):
    """Searches Spotify for song URIs."""
    track_uris = []
    for song, artist in songs:
        results = sp.search(q=f"track:{song} artist:{artist}", limit=1, type="track")
        tracks = results.get("tracks", {}).get("items", [])
        if tracks:
            track_uris.append(tracks[0]["uri"])
    return track_uris


def create_spotify_playlist(user_id, playlist_name, track_uris):
    """Creates a Spotify playlist and adds songs."""
    try:
        # Get the current authenticated user
        current_user_id = sp.current_user()["id"]

        # Create playlist
        playlist = sp.user_playlist_create(
            user=current_user_id,
            name=playlist_name,
            public=True,
            description="A custom playlist generated by Melody 🎶"
        )

        # Add tracks to playlist
        if track_uris:
            sp.playlist_add_items(playlist_id=playlist["id"], items=track_uris)

        return playlist["external_urls"]["spotify"]
    except Exception as e:
        print(f"[ERROR] Spotify playlist creation failed: {e}")
        return None


def music_assistant_llm(message):
    """Handles the full conversation and generates a playlist + Spotify link."""
    response = generate(
        model="4o-mini",
        system="""
            You are a **music therapy assistant** named MELODY 🎶. Your job is to create **personalized playlists** for users.
            
            - If it's the **first message**, say:
              "🎵 **WELCOME TO MELODY!** 🎶\nTell me how you're feeling and your favorite genre, and I'll create a **custom playlist just for you!**\n\nFor example:\n- "I'm feeling happy and I love pop!"\n- "I need some chill lo-fi beats."
            
            - Ask the user for their **mood and favorite music genre** if they haven't provided both yet.
            - DO NOT repeat details that have already been collected.
            - Once both **mood** and **genre** are provided, confirm them and say:
              "Got it! I'll create a playlist based on your mood: [mood] and your genre: [genre]. 🎶\nGenerating your playlist now..."
        """,
        query=f"User input: '{message}'\nCurrent preferences: {session['preferences']}",
        temperature=0.7,
        lastk=10,
        session_id="music-therapy-session",
        rag_usage=False
    )

    response_text = response.get("response", "⚠️ Sorry, I couldn't process that. Could you rephrase?").strip()

    # Extract mood and genre if available
    if "mood:" in response_text.lower() and "genre:" in response_text.lower():
        mood = response_text.split("Mood:")[1].split("Genre:")[0].strip()
        genre = response_text.split("Genre:")[1].strip()

        session["preferences"]["mood"] = mood
        session["preferences"]["genre"] = genre

        # Generate Playlist
        playlist_text, songs = generate_playlist(mood, genre)
        if not playlist_text:
            return "⚠️ Couldn't generate a playlist. Try again!"

        # Search and create Spotify playlist
        track_uris = search_songs(songs)
        spotify_url = create_spotify_playlist("user", f"{mood} {genre} Playlist", track_uris)

        if spotify_url:
            return f"{playlist_text}\n\n🎶 **Listen on Spotify:** {spotify_url}"
        else:
            return f"{playlist_text}\n\n⚠️ Couldn't create a Spotify playlist, but here are the songs!"

    return response_text


@app.route('/', methods=['POST'])
def main():
    """Handles user messages and decides what to do."""
    data = request.get_json()
    message = data.get("text", "").strip()

    return jsonify({"text": music_assistant_llm(message)})

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5001)
















