from flask import Flask, request, jsonify, make_response
from flask_cors import CORS
from llmproxy import generate
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials, SpotifyOAuth
import logging
import re
import ast

# === ‚öôÔ∏è Spotify Credentials (For testing only ‚Äî secure before deployment) ===
SPOTIFY_CLIENT_ID = '14745a598a994b708a8eeea02cd9cd53'
SPOTIFY_CLIENT_SECRET = '616aa8ebca9d40c6a4a1479a623c0558'
SPOTIFY_REDIRECT_URI = 'http://localhost:8888/callback'

# === üöÄ Flask App Configuration for Rocket.Chat ===
app = Flask(__name__)
CORS(app)  # Enable CORS for all routes
logging.basicConfig(level=logging.INFO)


def create_json_response(data, status_code=200):
    if "response" in data:
        data["text"] = data.pop("response")
    response = make_response(jsonify(data), status_code)
    response.headers["Content-Type"] = "application/json"
    return response


# === üéß LLM QA Agent for Playlist Suitability ===
def agent_playlist_QA(user_context, track_list):
    system = """
    You are an AI quality assurance agent for a music therapy playlist.
    Given the following:
    - The user's emotional state, age, location, and preferred music genre.
    - A list of recommended tracks (title and artist).
    Your task is to:
    - Analyze whether the playlist is contextually appropriate.
    - Suggest additional tracks if necessary in the format "Song - Artist".
    - If perfect, respond ONLY with `$$EXIT$$`.
    """
    track_summary = "\n".join([f"- {track}" for track in track_list])
    query = f"""
    User context:
    - Emotional state: {user_context['situation']}
    - Age: {user_context['age']}
    - Location: {user_context['location']}
    - Preferred genre: {user_context['genre']}

    Playlist tracks:
    {track_summary}
    """

    response = generate(
        model='4o-mini',
        system=system,
        query=query,
        temperature=0.3,
        lastk=10,
        session_id='MUSIC_THERAPY_QA',
        rag_usage=False
    )
    return response.get('response', "[DEBUG] No 'response' field in output.")


# === üéµ Core Spotify Functions ===
def search_song(mood, limit=30):
    sp = spotipy.Spotify(auth_manager=SpotifyClientCredentials(
        client_id=SPOTIFY_CLIENT_ID,
        client_secret=SPOTIFY_CLIENT_SECRET
    ))
    results = sp.search(q=f"{mood} music", limit=limit, type='track')
    track_uris, track_names = [], []
    for track in results.get('tracks', {}).get('items', []):
        track_info = f"{track['name']} by {track['artists'][0]['name']}"
        track_uris.append(track['uri'])
        track_names.append(track_info)
    return {"track_uris": track_uris, "track_names": track_names}


def create_playlist(user_id, playlist_name, description, track_uris):
    sp = spotipy.Spotify(auth_manager=SpotifyOAuth(
        client_id=SPOTIFY_CLIENT_ID,
        client_secret=SPOTIFY_CLIENT_SECRET,
        redirect_uri=SPOTIFY_REDIRECT_URI,
        scope='playlist-modify-public'
    ))
    playlist = sp.user_playlist_create(user=sp.current_user()['id'], name=playlist_name, public=True, description=description)
    playlist_url = playlist['external_urls']['spotify']
    for i in range(0, len(track_uris), 100):
        sp.playlist_add_items(playlist_id=playlist['id'], items=track_uris[i:i+100])
    return {"success": True, "url": playlist_url}


# === üéôÔ∏è API Endpoints for Rocket.Chat ===
@app.route('/generate_playlist', methods=['POST'])
def generate_playlist():
    try:
        user_context = request.get_json()
        user_id = user_context.get("user_id", "unknown")
        mood = user_context.get("mood", "happy")
        genre = user_context.get("genre", "pop")
        playlist_name = f"{mood.capitalize()} {genre.capitalize()} Playlist"
        
        # Generate initial playlist
        playlist_data = search_song(f"{mood} {genre}", limit=30)
        
        # QA validation
        qa_feedback = agent_playlist_QA(user_context, playlist_data['track_names'])
        if "SUGGESTIONS:" in qa_feedback:
            suggested_tracks = qa_feedback.split("SUGGESTIONS:")[1].strip().split("\n")
            for suggestion in suggested_tracks:
                song, artist = suggestion.split(" - ")
                uri = search_song(f"{song} {artist}", limit=1)['track_uris'][0]
                if uri:
                    playlist_data['track_uris'].append(uri)

        # Final playlist creation
        final_playlist = create_playlist(user_id, playlist_name, "Generated by AI Music Therapist", playlist_data['track_uris'])
        return create_json_response({"success": True, "url": final_playlist['url']})

    except Exception as e:
        logging.error(f"[ERROR] Playlist generation failed: {str(e)}")
        return create_json_response({"error": f"Playlist generation failed: {str(e)}"}, 500)


@app.route('/', methods=['GET'])
def health_check():
    return create_json_response({"text": "Rocket.Chat Music Therapy Playlist Generator is up and running!"})


if __name__ == "__main__":
    app.run(host='0.0.0.0', port=8080)

# === üöÄ Procfile for Deployment ===
# web: gunicorn rocket_chat_spotify:app
