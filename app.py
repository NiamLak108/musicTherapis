from flask import Flask, request, jsonify, make_response
from flask_cors import CORS
from llmproxy import generate
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials, SpotifyOAuth
import logging

# === ⚙️ Spotify Credentials (For testing only — secure before deployment) ===
SPOTIFY_CLIENT_ID = '14745a598a994b708a8eeea02cd9cd53'
SPOTIFY_CLIENT_SECRET = '616aa8ebca9d40c6a4a1479a623c0558'
SPOTIFY_REDIRECT_URI = 'http://localhost:8888/callback'

# === 🚀 Flask App Configuration for Rocket.Chat ===
app = Flask(__name__)
CORS(app)  # Enable CORS for all routes
logging.basicConfig(level=logging.INFO)


def create_json_response(data, status_code=200):
    if "response" in data:
        data["text"] = data.pop("response")
    response = make_response(jsonify(data), status_code)
    response.headers["Content-Type"] = "application/json"
    return response


# === 🎙️ Rocket.Chat Main Endpoint with Dynamic Response ===
@app.route('/', methods=['GET', 'POST'])
def health_check():
    if request.method == 'POST':
        data = request.get_json() or {}
        logging.info(f"[INFO] POST received at root with data: {data}")

        # Extract message text from Rocket.Chat payload
        user_message = data.get("text", "").lower()

        # Simple response logic (you can extend this)
        if user_message == "hi":
            reply_text = f"👋 Hello {data.get('user_name', 'there')}! How can I help you today?"
        elif "playlist" in user_message:
            reply_text = "🎵 I can generate a personalized Spotify playlist for you! Tell me your mood or favorite genre. 🎶"
        else:
            reply_text = "🤖 I'm here to help with music therapy playlists. Try saying 'generate playlist'!"

        return create_json_response({"text": reply_text})

    # Default GET response
    return create_json_response({"text": "🚀 Rocket.Chat Music Therapy Playlist Generator is live and ready!"})


# === 🎵 Core Spotify Functions (Unchanged) ===
def search_song(mood, limit=30):
    sp = spotipy.Spotify(auth_manager=SpotifyClientCredentials(
        client_id=SPOTIFY_CLIENT_ID,
        client_secret=SPOTIFY_CLIENT_SECRET
    ))
    results = sp.search(q=f"{mood} music", limit=limit, type='track')
    track_uris, track_names = [], []
    for track in results.get('tracks', {}).get('items', []):
        track_info = f"{track['name']} by {track['artists'][0]['name']}"
        track_uris.append(track['uri'])
        track_names.append(track_info)
    return {"track_uris": track_uris, "track_names": track_names}


# === 🎧 Playlist Generator Endpoint ===
@app.route('/generate_playlist', methods=['POST'])
def generate_playlist():
    try:
        user_context = request.get_json()
        user_id = user_context.get("user_id", "unknown")
        mood = user_context.get("mood", "happy")
        genre = user_context.get("genre", "pop")
        playlist_name = f"{mood.capitalize()} {genre.capitalize()} Playlist"

        # Generate playlist
        playlist_data = search_song(f"{mood} {genre}", limit=30)
        playlist_url = create_playlist(user_id, playlist_name, "Generated by AI Music Therapist", playlist_data['track_uris'])['url']

        return create_json_response({"success": True, "text": f"🎉 Here's your playlist: {playlist_url}"})

    except Exception as e:
        logging.error(f"[ERROR] Playlist generation failed: {str(e)}")
        return create_json_response({"error": f"Playlist generation failed: {str(e)}"}, 500)


if __name__ == "__main__":
    app.run(host='0.0.0.0', port=8080)



